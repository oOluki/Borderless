#ifndef MAPS_HEADER
#define MAPS_HEADER

#include "begin.h"

#define MAXQ (sizeof(map1) / sizeof(map1[0]))

static const int map1w = 32;
static const int map1h = 32;
static const unsigned char map1[] = {
	01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01,
	01, 16, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01,
	01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01,
	01, 00, 00, 01, 01, 01, 01, 01, 00, 01, 01, 01, 01, 01, 00, 00, 00, 00, 01, 01, 01, 01, 01, 00, 01, 01, 01, 01, 01, 00, 00, 01,
	01, 00, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 01,
	01, 00, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 01,
	01, 00, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 01,
	01, 00, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 01,
	01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 17, 00, 00, 00, 00, 00, 00, 00, 01,
	01, 00, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 01,
	01, 00, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 01,
	01, 00, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 01,
	01, 00, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 01,
	01, 00, 00, 01, 01, 01, 01, 01, 00, 01, 01, 01, 01, 01, 00, 00, 00, 00, 01, 01, 01, 01, 01, 00, 01, 01, 01, 01, 01, 00, 00, 01,
	01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01,
	01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01,
	01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 17, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01,
	01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01,
	01, 00, 00, 01, 01, 01, 01, 01, 00, 01, 01, 01, 01, 01, 00, 00, 00, 00, 01, 01, 01, 01, 01, 00, 01, 01, 01, 01, 01, 00, 00, 01,
	01, 00, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 01,
	01, 00, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 01,
	01, 00, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 01,
	01, 00, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 01,
	01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01,
	01, 00, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 01,
	01, 00, 00, 01, 00, 00, 00, 00, 17, 00, 00, 00, 00, 01, 00, 00, 00, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 01,
	01, 00, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 01,
	01, 00, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 01,
	01, 00, 00, 01, 01, 01, 01, 01, 00, 01, 01, 01, 01, 01, 00, 00, 00, 00, 01, 01, 01, 01, 01, 00, 01, 01, 01, 01, 01, 00, 00, 01,
	01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01,
	01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01,
	01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01,
};

static unsigned int  player_dist[MAXQ];
static unsigned char mapbuff[MAXQ];

int bfs_from_player(const Map map, Node player){
	
	static Node queue[MAXQ];

    int qh=0, qt=0;

    // init distances
    for (int y=0; y<map.h; y+=1)
        for (int x=0; x<map.w; x+=1)
            player_dist[y * map.w + x] = -1;

    queue[qt++] = player;
    player_dist[player.y * map.w + player.x] = 0;

    int dirs[4][2] = {{1,0},{-1,0},{0,1},{0,-1}};

    while (qh < qt) {
        Node cur = queue[qh++];
        for (int i=0; i<4; i++) {
            int nx = cur.x + dirs[i][0];
            int ny = cur.y + dirs[i][1];
            if (nx>=0 && nx<map.w && ny>=0 && ny<map.h &&
                map.map[ny * map.w + nx]==0 && player_dist[ny * map.w + nx]==-1) {
                player_dist[ny * map.w + nx] = player_dist[cur.y * map.w + cur.x] + 1;
                queue[qt++] = (Node){nx, ny};
            }
        }
    }
    return 0;
}

Node move_towards_player(int mapw, int maph, Node start) {
    int bestd = player_dist[start.y * mapw + start.x];
    Node best = start;

    int dirs[4][2] = {{1,0},{-1,0},{0,1},{0,-1}};
    for (int i=0; i<4; i++) {
        int nx = start.x + dirs[i][0];
        int ny = start.y + dirs[i][1];
        if (nx>=0 && nx<mapw && ny>=0 && ny<maph &&
            player_dist[ny * mapw + nx] != -1 && player_dist[ny * mapw + nx] < bestd) {
            bestd = player_dist[ny * mapw + nx];
            best = (Node){nx, ny};
        }
    }
    return best;
}

#endif // =====================  END OF FILE MAPS_HEADER ===========================